#!/bin/bash

ROOT=`dirname $0`
source $ROOT/assert

MOCKPROJECT=$ROOT/../../usenode-release-mockproject

# Set up mocked dependencies
export PATH="$ROOT/mock:$PATH"

##
# Test input validation
MISSING_ARGUMENTS=`$ROOT/../bin/usenode-release`
assert "$MISSING_ARGUMENTS" "Usage: usenode-publish path/to/project [new_version]" "Script outputs usage message if no arguments are passed"

CANNOT_FIND_PACKAGE_JSON=`$ROOT/../bin/usenode-release $MOCKPROJECT-does-not-exist`
assert "$CANNOT_FIND_PACKAGE_JSON" "Could not find package.json at $MOCKPROJECT-does-not-exist/package.json" "Script throws an error if cannot find package.json at project location"

##
# Test uncommitted changes
$ROOT/create-mock-project $MOCKPROJECT > /dev/null
touch $MOCKPROJECT/dummy-file

BLAH=`$ROOT/../bin/usenode-release $MOCKPROJECT 4.5.6 | egrep -i 'error'`
assert "$BLAH" "Error: There are uncommited changes" "Do not release if there are uncommitted changes"

PACKAGE_VERSION_NUMBER=`cat $MOCKPROJECT/package.json | egrep '"version"'`
assert "$PACKAGE_VERSION_NUMBER" '"version": "1.2.3"' "Version number in package.json is untouched"

##
# Test package.json is updated
$ROOT/create-mock-project $MOCKPROJECT > /dev/null
$ROOT/../bin/usenode-release $MOCKPROJECT 2.3.4

PACKAGE_VERSION_NUMBER=`cat $MOCKPROJECT/package.json | egrep '"version"'`
assert "$PACKAGE_VERSION_NUMBER" '"version": "2.3.4"' "Version number is updated in package.json"

PACKAGE_COMMIT_MESSAGE_FROM_LOG=`cd $MOCKPROJECT; git log package.json | egrep 'Version'`
assert "$PACKAGE_COMMIT_MESSAGE_FROM_LOG" "    Version for release 2.3.4" "Changes to package.json are commited"

REMOTE_LOG=`cd $MOCKPROJECT-head; git log | egrep 'Version'`
assert "$REMOTE_LOG" "    Version for release 2.3.4" "Changes are pushed to remote"

##
# Test project is published to npm
MOCK_NPM_LOG=`cat $ROOT/mock/npm.log`
assert "$MOCK_NPM_LOG" "publish $MOCKPROJECT" "Project is published to npm"

#tear down
rm $ROOT/mock/npm.log
rm -fr $MOCKPROJECT $MOCKPROJECT-head

